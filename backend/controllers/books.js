const Book = require('../models/Book');
const fs = require('fs');

exports.createBook = (req, res, next) => {
    const bookObject = JSON.parse(req.body.book); // Parse req obj (string)
    delete bookObject._id; // automatically generated by db
    delete bookObject._userId; // Don't trust the client !
    
    const book = new Book ({ // create a new book instance
        ...bookObject, //req body - _id and_userId
        userId: req.auth.userId, //from auth middleware
        imageUrl: `${req.protocol}://${req.get('host')}/images/resized-${req.file.filename.replace(/\.[^.]*$/,'')}.webp`, //Generate URL thx to req obj properties
        ratings :{ // Define ratings from req obj properties
            userId: req.auth.userId, 
            grade: bookObject.ratings[0].grade
        },
        averageRating: bookObject.ratings[0].grade // define new average rating from req obj properties
    });

    book.save() // save the new book element in db - returns a Promise
        .then(() => res.status(201).json({message:"Livre enregistré !"})) // Send succes res
        .catch(error => res.status(400).json({error})); // Send error res  
};

exports.getOneBook = (req, res, next) => {
    Book.findOne({ _id: req.params.id })
        .then((book) => { res.status(200).json(book); })
        .catch((error) => { res.status(404).json({ error: error }); });
};

exports.modifyBook = (req, res, next) => {
    const bookObject = req.file ? { // If req contains file, create new img url
        ...JSON.parse(req.body.book), //get req body obj by parsing string
        imageUrl: `${req.protocol}://${req.get('host')}/images/resized-${req.file.filename.replace(/\.[^.]*$/,'')}.webp`
    } : { ...req.body }; // If not, just get req body obj
    delete bookObject._userId; // Don't trust the client !
    Book.findOne({_id: req.params.id})
        .then(book => {
            if (book.userId != req.auth.userId) { //if the user isn't the one who created the elmt
                res.status(401).json({ message : 'Not authorized'});
            } else {
                if(req.file){
                    //If the req contains a new file, in order to supp the old one :
                    const oldfile = book.imageUrl.split('/images/')[1];
                    fs.unlink(`images/${oldfile}`, () => {
                        Book.updateOne({_id: req.params.id}, {...bookObject, _id: req.params.id})
                        .then (() => res.status(200).json({message: "Livre modifié!"}))
                        .catch (error => res.status(400).json({error}));
                    });
                }else{
                    //If there is no new file, just update the other book info
                    Book.updateOne({_id: req.params.id}, {...bookObject, _id: req.params.id})
                        .then (() => res.status(200).json({message: "Livre modifié!"}))
                        .catch (error => res.status(400).json({error}));
                };
            }
        })
        .catch((error) => {
            res.status(400).json({ error });
        });
};




exports.deleteBook = (req, res, next) => {
    Book.findOne({ _id: req.params.id })
        .then(book => {
            if (book.userId != req.auth.userId) {
                res.status(401).json({ message: 'Not authorized' });
            } else {
                const filename = book.imageUrl.split('/images/')[1];
                fs.unlink(`images/${filename}`, () => {
                    Book.deleteOne({ _id: req.params.id })
                        .then(() => { res.status(200).json({ message: 'Objet supprimé !' }) })
                        .catch(error => res.status(401).json({ error }));
                });
            }
        })
        .catch(error => {
            res.status(500).json({ error });
        });
};

exports.getAllBooks = (req, res, next) => {
    Book.find()
        .then(books => res.status(200).json(books))
        .catch(error => res.status(400).json({ error }));
};

exports.getBestRate = (req, res, next) => {
    //https://www.mongodb.com/docs/drivers/node/current/fundamentals/crud/read-operations/sort/ pour ranger les notes par ordre décroissant
    //https://www.mongodb.com/docs/drivers/node/current/fundamentals/crud/read-operations/limit/ pour prendre les 3e 
    Book.find().sort({ averageRating: -1 }).limit(3)
        .then(books => res.status(200).json(books))
        .catch(error => res.status(400).json({ error }));
};

exports.rateBook = (req, res) => {
    Book.findOne({ _id: req.params.id })
        .then(book => {
            if (book.ratings.includes(rating => rating.userId == req.body.userId)) {
                res.status(404).json({ message: 'Vous avez déja noté ce livre' });
            } else if (1 > req.body.rating > 5){
                res.status(404).json({ message: 'Vous avez déja noté ce livre' });
            } else {
                //push le userId et le grade dans le tableau rattings de l'objet book
                book.ratings.push({
                    userId: req.auth.userId,
                    grade: req.body.rating
                });
                let sumGrades = 0
                //pour chaque index du tableau ratings, on récupère la 'grade' et on l'ajoute à la somme des notes
                for (let i = 0; i < book.ratings.length; i++) {
                    let indexGrade = book.ratings[i].grade;
                    sumGrades += indexGrade;
                }
                //on actualise la note moyenne en divisant la somme des notes par le nombre de notes dispo dans le tableau
                book.averageRating = Math.round((sumGrades / book.ratings.length) * 100) / 100;
                return book.save();
            }
        })
        .then((book) => { res.status(200).json(book); })
        .catch((error) => { res.status(404).json({ error: error }); });


};
